close all; clc; clear

% rows -> GT
% cols -> estimated states

%------
M = [0, 0.2, 0, 0.1, 0; 
    0.6, 0, 0, 0.1, 0.2; 
    0.1, 0, 0.5, 0.4, 0; 
    0, 0.1, 0, 0, 0.5];

[assoc, cost] = Hungarian(1 - M);

disp(['Cost from the function: ' num2str(cost, 4) ' - Cost from the sum of M elements: ' num2str(sum(1 - M(assoc(:)==1)), 4)])

%------
M(2,1) = 0.5;

[~, cost] = Hungarian(1 - M);

disp(['Cost from the function: ' num2str(cost, 4) ' - Cost from the sum of M elements: ' num2str(sum(1 - M(assoc(:)==1)), 4)])

%------
M(2,1) = 1;
M(1,2) = 1;
M(3,3) = 1;
M(4,5) = 1;

[~, cost] = Hungarian(1 - M);

disp(['Cost from the function: ' num2str(cost, 4) ' - Cost from the sum of M elements: ' num2str(sum(1 - M(assoc(:)==1)), 4)])

%------
M(2,1) = 0.4;
M(3,1) = 0.4;

[~, cost] = Hungarian(1 - M);

disp(['Cost from the function: ' num2str(cost, 4) ' - Cost from the sum of M elements: ' num2str(sum(1 - M(assoc(:)==1)), 4)])

%------ Example of wrong association
M = [0.8 0 0 0; 0 0.6 0 0; 0 0 0.7 0; 0 0 0 0];
[assoc1, cost1] = Hungarian(1 - M);

%------ Example of correct association
M = [0.8 0 0 0; 0 0.6 0 0; 0 0 0.7 0; 0 0 0 -inf];
[assoc2, cost2] = Hungarian(1 - M);

assoc1

assoc2

%------ Example without normalisation and without cardinality
M = [0.9 0 0 0 ; 0 0 0 0 ; 0 0 0 0 ; 0 0 0 0];
M(M==0) = -inf;
[assoc3, cost3] = Hungarian(1 - M);

M = [0.9 0 0 0 ; 0 0.9 0 0 ; 0 0 0.9 0 ; 0 0 0 0.9];
M(M==0) = -inf;
[assoc4, cost4] = Hungarian(1 - M);

disp(['cost3 - unnormalised wo. card: ' num2str(cost3,3)])

disp(['cost4 - unnormalised wo. card: ' num2str(cost4,3)])


%------ Example wit normalisation and without cardinality
M = [0.9 0 0 0 ; 0 0 0 0 ; 0 0 0 0 ; 0 0 0 0];
M(M==0) = -inf;
[assoc5, cost5] = Hungarian(1 - M);

M = [0.9 0 0 0 ; 0 0.9 0 0 ; 0 0 0.9 0 ; 0 0 0 0.9];
M(M==0) = -inf;
[assoc6, cost6] = Hungarian(1 - M);

disp(['cost5 - normalised wo. card: ' num2str(cost5/4,3)])

disp(['cost6 - normalised wo. card: ' num2str(cost6/4,3)])


disp('+++++++++++++++')


%------ Example without normalisation and with cardinality
M = [0.9 0 0 0 ; 0 0 0 0 ; 0 0 0 0 ; 0 0 0 0];
M(M==0) = -inf;
[assoc7, cost7] = Hungarian(1 - M);

M = [0.9 0 0 0 ; 0 0.9 0 0 ; 0 0 0.9 0 ; 0 0 0 0.9];
M(M==0) = -inf;
[assoc8, cost8] = Hungarian(1 - M);

disp(['cost7 - unnormalised w. card: ' num2str(cost7 + 3,3)])

disp(['cost8 - unnormalised w. card: ' num2str(cost8,3)])


%------ Example wit normalisation and with cardinality
M = [0.9 0 0 0 ; 0 0 0 0 ; 0 0 0 0 ; 0 0 0 0];
M(M==0) = -inf;
[assoc9, cost9] = Hungarian(1 - M);

M = [0.9 0 0 0 ; 0 0.9 0 0 ; 0 0 0.9 0 ; 0 0 0 0.9];
M(M==0) = -inf;
[assoc10, cost10] = Hungarian(1 - M);

disp(['cost9 - normalised w. card: ' num2str((cost9 + 3)/4,3)])

disp(['cost10 - normalised w. card: ' num2str(cost10/4,3)])




%------ Example with explicit normalisations
M = [.9 0 0 0 ; 0 .8 0 0 ; 0 0 0 0 ; 0 0 0 0 ; 0 0 0 0];
M(M==0) = -inf;
[assoc, cost] = Hungarian(1 - M);
0.3/2 + 2/4 + 1/5

M = [.9 0 0 0 ; 0 .8 0 0 ; 0 0 .8 0 ; 0 0 0 .7 ; 0 0 0 0];
M(M==0) = -inf;
[assoc, cost] = Hungarian(1 - M);
0.8/4 + 0/4 + 1/5

M = [1 0 0 0 ; 0 1 0 0 ; 0 0 1 0 ; 0 0 0 1 ; 0 0 0 0];
M(M==0) = -inf;
[assoc, cost] = Hungarian(1 - M);
0/4 + 0 + 1/5


% plot tracking effor function
img_scale = 100;
img_res = 10;
figure(12)
[X,Y] = meshgrid(0:.01:1,0:.01:1);
Z = X.^2 - Y.^2;
%bZ = X < Y;
%Z(bZ) = -((1-X(bZ)).^2 - (1-Y(bZ)).^2);
contourf(Z,30)
set(gca, 'ytick', 0:img_res:img_scale, 'yticklabel', 0:1/img_res:1);
set(gca, 'xtick', 0:img_res:img_scale, 'xticklabel', 0:1/img_res:1);
%axis ij
colorbar
set(12, 'position', [347 366 689 566])
xlabel('E^d', 'fontsize', 14)
ylabel('E^t', 'fontsize', 14)
set(gca, 'fontsize', 14)

% axis([0 img_scale 0 img_scale])

% this an example of different scores that could be generated by some
% trackers. EDET -> [E^d E^t]
col = ['r', 'b', 'w', 'y', 'g', 'k'];
EDET = [.8 .5 ; .5 .2 ; .55 .6 ; .1 .9 ; .9 .1 ; .2 .2];

for i = 1:numel(col)
    rectangle('position', [EDET(i,1)*img_scale EDET(i,2)*img_scale 1 1], 'linewidth', 3, 'edgecolor', col(i))
end


